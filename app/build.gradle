apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.fernandocejas.frodo'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        applicationId globalConfiguration.getAt("androidApplicationId")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId globalConfiguration.getAt("testApplicationId")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
    }

    productFlavors {
        // Define separate dev and prod product flavors.
        dev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21
        }
        prod {
            // The actual minSdkVersion for the application.
            minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        }
    }
}

dependencies {
    def commonDependencies = rootProject.ext.commonDependencies
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    def dataDependencies = rootProject.ext.dataDependencies
    def testDependencies = rootProject.ext.dataTestDependencies

    apt commonDependencies.daggerCompiler
    provided commonDependencies.javaxAnnotation
    compile commonDependencies.dagger

    compile presentationDependencies.butterKnife
    compile presentationDependencies.appcompatv7
    compile presentationDependencies.recyclerView

    compile dataDependencies.okHttp
    compile dataDependencies.gson
    compile dataDependencies.rxJava
    compile dataDependencies.rxAndroid
    compile dataDependencies.androidAnnotations
    compile dataDependencies.retrofit2
    compile dataDependencies.retrofit2GsonConverter
    compile dataDependencies.retrofit2RxAdapter

    testCompile testDependencies.junit
    testCompile testDependencies.mockito
    testCompile testDependencies.hamcrest
    testCompile testDependencies.robolectric

    androidTestApt commonDependencies.daggerCompiler
    androidTestCompile presentationTestDependencies.mockito
    androidTestCompile presentationTestDependencies.hamcrest
    androidTestCompile presentationTestDependencies.dexmaker
    androidTestCompile presentationTestDependencies.dexmakerMockito
    androidTestCompile(presentationTestDependencies.espressoCore) {
        exclude module: 'support-annotations'
    }
    androidTestCompile(presentationTestDependencies.espressoIntents) {
        exclude module: 'support-annotations'
    }
    androidTestCompile(presentationTestDependencies.androidTestRules) {
        exclude module: 'support-annotations'
    }
}
